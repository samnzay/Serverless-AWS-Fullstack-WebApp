https://review.udacity.com/#!/reviews/3680000

# RECENT PROJECT REVIEW

Requires Changes
1 specification requires changes
Congratulations üéâ You are passing with flying colors üåà.

Good work! The business logic of the application has been separated.

This is a complicated nanodegree, but in the end, it is one of the most valuable skills to have in the industry. Your solution demonstrates a solid understanding of serverless architectures.

Here are a few resources you might find useful for more insight and further learning:

Serverless Web Application
Serverless framework guide
Serverless Computing
AWS ‚Äî Serverless services on AWS
Wish you all the best for your future!

Keep Learning
Stay Udacious
:udacious:

1. Functionality
   A user of the web application can use the interface to create, delete and complete a TODO item.

Good job!! Able to create, edit, upload, and delete the tasks :white_check_mark:

A user of the web interface can click on a "pencil" button, then select and upload a file. A file should appear in the list of TODO items on the home page.

Able to edit and upload an image and the same image visible on item :white_check_mark:

If you log out from a current user and log in as a different user, the application should not show TODO items created by the first account.

Once I switch to another google account I can only see the todo items specific to the user. Well done !

A user needs to authenticate in order to use an application.

Authentication is required :white_check_mark:

It's nicely have been done by using Auth0 authentication.
EXTERNAL RESOURCE
üìö Please refer to here to learn more about Auth0 Best Practices

2. Code Base
   Code of Lambda functions is split into multiple files/classes. The business logic of an application is separated from code for database access, file storage, and code related to AWS Lambda.

Screenshot 2022-09-01 at 8.30.36 PM.png

The business logic of an application should be separated from the code for
database access, file storage, and code related to AWS Lambda (in folder src/lambda/).

To separate code for database access and file storage, kindly create two folders,
properly named to match the separated code.
e.g. src/businessLogic and src/dataLayer.

You can watch the course and apply it as it is there:

The dataLayer folder
The businessLogic folder
:bulb: Implementing the business logic layer src/businessLogic:
These functions should be independent of details of working with AWS DynamoDB or invoking other services like Azure from Microsoft, Google, ...

Tips: The functions under src/businessLogic folder should not import AWS modules.

To get results of asynchronous operations, a student is using async/await constructs instead of passing callbacks.

Good work, making use of async/await. This makes your code more readable.
Async/Await under the hood promises using generators to deal with the asynchronous code.

EXTERNAL RESOURCE
üìöIf you are curious to know why you should use async/await constructs instead of passing callbacks, I recommend reading this article.
To read more, you can click this link

3. Best Practices
   All resources needed by an application are defined in the "serverless.yml". A developer does not need to create them manually using AWS console.

All resources needed by the application are defined in the serverless.yml file correctly üëç

Instead of defining all permissions under provider/iamRoleStatements, permissions are defined per function in the functions section of the "serverless.yml".

Each function has its own permission defined to ensure they only possess the access required to complete the task at hand. This ensures best practice for Principle of Least Privilege (POLP)

Here is a good article explaining the benefits of the POLP.

Application has at least some of the following:

Distributed tracing is enabled
It has a sufficient amount of log statements
It generates application level metrics
Great Job üëè by enabling AWS X-Ray distributed tracing
AWS X-Ray helps you analyze and debug production, distributed applications, such as those built using a microservices architecture. X-Ray provides an end-to-end view of requests as they travel through your application, and shows a map of your application‚Äôs underlying components.

It has sufficient log statements to support the application debugging :white_check_mark:

With X-Ray tracing is means you will be follow paths and discover exactly how the application is performing. You might this link useful which helps to explain the benefits of using X-Ray tracing.

Incoming HTTP requests are validated either in Lambda handlers or using request validation in API Gateway. The latter can be done either using the serverless-reqvalidator-plugin or by providing request schemas in function definitions.

Great work, you have provided some validation files in .json format.

This is a good practice to get into the habit of as it can prevent any rogue data from getting into the databases and causing issues down the line.

4. Architecture
   1:M (1 to many) relationship between users and TODO items is modeled using a DynamoDB table that has a composite key with both partition and sort keys. Should be defined similar to this:

   KeySchema: - AttributeName: partitionKey
   KeyType: HASH - AttributeName: sortKey
   KeyType: RANGE
   Great job üëè
   Some students have difficulty choosing the right primary key for a DynamoDB table.

If you had such experience, this article will help you to choose the right primary key for a DynamoDB table.

TODO items are fetched using the "query()" method and not "scan()" method (which is less efficient on large datasets)

The TODO items are fetched using the query method instead of the scan method. In general, the scan method will search the whole table and then begin filtering. This will cause performance issues which you want to avoid in your application.

EXTERNAL RESOURCE
üìöFor more information on why to use query instead of scan, please see this link.

Download DOWNLOAD PROJECT

Best practices for your project resubmission
Ben shares 5 helpful tips to get you through revising and resubmitting your project.

Watch Video (3:01)
